import unittest
import importlib

class TestAssignmentSix(unittest.TestCase):
    def test_01_double_odd_args(self):
        self.assertEqual(asgmt.double_odd_args(55), [110])
        self.assertEqual(asgmt.double_odd_args(55, 66), [110])
        self.assertEqual(asgmt.double_odd_args(55, 66, 77, 88), [110, 154])
        self.assertEqual(asgmt.double_odd_args(55, 66, 77, 88, 1), [110, 154, 2])
        self.assertEqual(asgmt.double_odd_args(55, 66, 77, 88, 1, 2), [110, 154, 2])
    def test_02_filter_str_args(self):
        self.assertEqual(asgmt.filter_str_args("5566"), ['5566'])
        self.assertEqual(asgmt.filter_str_args("5566", 5566, False), ['5566'])
        self.assertEqual(asgmt.filter_str_args("5566", 5566, False, True, "Luke Skywalker"), ['5566', 'Luke Skywalker'])
        self.assertEqual(asgmt.filter_str_args("5566", 5566, False, True, "Luke Skywalker", 123), ['5566', 'Luke Skywalker'])
        self.assertEqual(asgmt.filter_str_args("5566", 5566, False, True, "Luke Skywalker", 123, "123"), ['5566', 'Luke Skywalker', '123'])
    def test_03_ReduceArgs(self):
        reduce_args = asgmt.ReduceArgs(1, 2, 3)
        self.assertEqual(reduce_args.summation(), 6)
        self.assertEqual(reduce_args.product(), 6)
        reduce_args = asgmt.ReduceArgs(1, 2, 3, 4)
        self.assertEqual(reduce_args.summation(), 10)
        self.assertEqual(reduce_args.product(), 24)
        reduce_args = asgmt.ReduceArgs(1, 2, 3, 4, 5)
        self.assertEqual(reduce_args.summation(), 15)
        self.assertEqual(reduce_args.product(), 120)
    def test_04_SortArgs(self):
        sort_args = asgmt.SortArgs()
        self.assertEqual(sort_args.sort_asc(1, 2, 0), [0, 1, 2])
        self.assertEqual(sort_args.sort_desc(1, 2, 0), [2, 1, 0])
        self.assertEqual(sort_args.sort_asc(4, 3, 5), [3, 4, 5])
        self.assertEqual(sort_args.sort_desc(4, 3, 5), [5, 4, 3])
    def test_05_ReverseKeyValues(self):
        reverse_key_values = asgmt.ReverseKeyValues(twn='Taiwan')
        self.assertEqual(reverse_key_values.keys, ['twn'])
        self.assertEqual(reverse_key_values.values, ['Taiwan'])
        self.assertEqual(reverse_key_values.reverse(), {'Taiwan': 'twn'})
        reverse_key_values = asgmt.ReverseKeyValues(twn='Taiwan', jpn='Japan')
        self.assertEqual(reverse_key_values.keys, ['twn', 'jpn'])
        self.assertEqual(reverse_key_values.values, ['Taiwan', 'Japan'])
        self.assertEqual(reverse_key_values.reverse(), {'Taiwan': 'twn', 'Japan': 'jpn'})
        reverse_key_values = asgmt.ReverseKeyValues(twn='Taiwan', jpn='Japan', usa='United States of America')
        self.assertEqual(reverse_key_values.keys, ['twn', 'jpn', 'usa'])
        self.assertEqual(reverse_key_values.values, ['Taiwan', 'Japan', 'United States of America'])
        self.assertEqual(reverse_key_values.reverse(), {'Taiwan': 'twn', 'Japan': 'jpn', 'United States of America': 'usa'})
    def test_06_FizzBuzz(self):
        fizz_buzz = asgmt.FizzBuzz()
        self.assertEqual(fizz_buzz.nth_element(1), 1)
        self.assertEqual(fizz_buzz.nth_element(3), 'Fizz')
        self.assertEqual(fizz_buzz.nth_element(5), 'Buzz')
        self.assertEqual(fizz_buzz.nth_element(15), 'Fizz Buzz')
        self.assertEqual(fizz_buzz.generate_sequence(5), [1, 2, 'Fizz', 4, 'Buzz'])
        self.assertEqual(fizz_buzz.generate_sequence(15), [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'Fizz Buzz'])
    def test_07_MonthName(self):
        month_name = asgmt.MonthName()
        self.assertEqual(month_name.get_name(1), 'January')
        self.assertEqual(month_name.get_abb(2), 'Feb.')
        self.assertEqual(month_name.get_name(3), 'March')
        self.assertEqual(month_name.get_abb(10), 'Oct.')
        self.assertEqual(month_name.get_name(11), 'November')
        self.assertEqual(month_name.get_abb(12), 'Dec.')
    def test_08_import_teams_json(self):
        teams_json = asgmt.import_teams_json()
        self.assertIsInstance(teams_json, dict)
        self.assertEqual(len(teams_json["data"]), 30)
    def test_09_find_teams_conference_division(self):
        self.assertEqual(asgmt.find_teams_conference_division("BOS"), ('East', 'Atlantic'))
        self.assertEqual(asgmt.find_teams_conference_division("MIA"), ('East', 'Southeast'))
        self.assertEqual(asgmt.find_teams_conference_division("NYK"), ('East', 'Atlantic'))
        self.assertEqual(asgmt.find_teams_conference_division("PHI"), ('East', 'Atlantic'))
        self.assertEqual(asgmt.find_teams_conference_division("LAL"), ('West', 'Pacific'))
        self.assertEqual(asgmt.find_teams_conference_division("DEN"), ('West', 'Northwest'))
        self.assertEqual(asgmt.find_teams_conference_division("PHX"), ('West', 'Pacific'))
        self.assertEqual(asgmt.find_teams_conference_division("GSW"), ('West', 'Pacific'))
    def test_09_find_teams_city(self):
        self.assertEqual(asgmt.find_teams_city("Celtics"), "Boston")
        self.assertEqual(asgmt.find_teams_city("Heat"), "Miami")
        self.assertEqual(asgmt.find_teams_city("Knicks"), "New York")
        self.assertEqual(asgmt.find_teams_city("76ers"), "Philadelphia")
        self.assertEqual(asgmt.find_teams_city("Lakers"), "Los Angeles")
        self.assertEqual(asgmt.find_teams_city("Nuggets"), "Denver")
        self.assertEqual(asgmt.find_teams_city("Suns"), "Phoenix")
        self.assertEqual(asgmt.find_teams_city("Warriors"), "Golden State")

asgmt = importlib.import_module("asgmt-six")
suite = unittest.TestLoader().loadTestsFromTestCase(TestAssignmentSix)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))